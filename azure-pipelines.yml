# For reference, see https://aka.ms/yaml

variables:
  M2_LOCAL_REPO: $(Pipeline.Workspace)/local-maven-repo
  MAVEN_OPTS: '-Dmaven.repo.local=$(M2_LOCAL_REPO)'
  # mitigation for https://issues.sonatype.org/browse/NEXUS-27902
  JDK_JAVA_OPTIONS: '--add-opens java.base/java.util=ALL-UNNAMED' 

trigger:
  batch: true

schedules:
- cron: "0 0 * * *"
  displayName: Daily scheduled run
  branches:
    include:
      - develop
    #exclude: 
  always: true
      
jobs:
- job: testframework
  pool: 'ubuntu-20.4-DS1_v2-adopt-adoptium-jdk'
  continueOnError: false
  timeoutInMinutes: 20
  variables:
    SKIP_PUBLICATION: false
    VERSION_OVERRIDE:
  
  workspace:
    clean: all

  steps:

  - task: Cache@2
    inputs:
      key: 'mvn | "$(Agent.OS)" | pom.xml'
      restoreKeys: |
        mvn | "$(Agent.OS)"
        mvn
      path: $(M2_LOCAL_REPO)
    displayName: Configure maven caching

  - task: DownloadSecureFile@1
    name: pgpPrivateKey
    displayName: 'Secrets - download pgp key'
    inputs:
      secureFile: 'order-iom-project-archetype-gpg_private_key_iom.pgp'
    
  - task: MavenAuthenticate@0
    inputs:
      artifactsFeeds: order-iom-snapshots
      mavenServiceConnections: order-iom-sonatype-ossrh
    timeoutInMinutes: 1
    displayName: "Maven authenticate"

  - task: JavaToolInstaller@0
    inputs:
      versionSpec: '17'
      jdkArchitectureOption: 'x64'
      jdkSourceOption: 'PreInstalled'

  - script: |
      # Only some certain branches are allowed for publication!
      # Note: due to weird implementation, Azure pipelines will cut off everything before the last trailing slash
      # "feature/some-feature" will become "some-feature"
      if ! echo "$BUILD_SOURCEBRANCHNAME" | grep -q '^develop$\|^release-\|^main$'; then
        # from now on we have to use GitHubs branch name convention: "[issue-number]-issue-description" 
        # e.g. 39-allow-usage-of-feature-branch-snapshots-in-iom-platform-tests
        IFS="-" read -ra VERSION_SPLIT <<< "$BUILD_SOURCEBRANCHNAME"
        POM_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout | tail -1)
        FEATURE_BRANCH_NUMBER=${VERSION_SPLIT[0]}
        if (! echo $FEATURE_BRANCH_NAME | grep -E -q '^[0-9]+$') || (! echo $POM_VERSION | grep -q '-SNAPSHOT$') ; then
          echo "##vso[task.setvariable variable=SKIP_PUBLICATION;]true"
          echo "##vso[task.logissue type=warning] publication skipped - encountered unparseable branch name"
        else
          VERSION_OVERRIDE=-Dproject.version=$(echo $POM_VERSION | sed -E 's/^(.+)(-SNAPSHOT)$/\1-'"$FEATURE_BRANCH_NUMBER"'\2/')
          echo "##vso[task.setvariable variable=VERSION_OVERRIDE;]$VERSION_OVERRIDE"
        fi
    timeoutInMinutes: 2
    displayName: "Check for publication / release build"
    #enabled: false

  - script: |
      ./mvnw clean verify
    timeoutInMinutes: 10
    displayName: "Build test-framework"
    condition: and(succeeded(), eq(variables.SKIP_PUBLICATION, true))
    env:
      PGP_PASSPHRASE: "literal:$(pgpPassphrase)"
      PGP_SECRETKEY: "keyfile:$(pgpPrivateKey.secureFilePath)"

  - script: |
      ./mvnw clean deploy $VERSION_OVERRIDE
    timeoutInMinutes: 10
    displayName: "Publish test-framework"
    #enabled: false
    condition: and(succeeded(), eq(variables.SKIP_PUBLICATION, false))
    env:
      PGP_PASSPHRASE: "literal:$(pgpPassphrase)"
      PGP_SECRETKEY: "keyfile:$(pgpPrivateKey.secureFilePath)"
       
  - task: PublishTestResults@2
