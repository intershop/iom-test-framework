openapi: 3.0.1
info:
  title: IOM Reservation Service REST API
  description: Reservation of products.
  contact:
    name: Intershop Communications AG
    url: http://intershop.com
  version: "2.0"
servers:
- url: '{protocol}://{domain}:{port}/servlets/services'
  variables:
    protocol:
      default: http
      enum:
      - http
      - https
    domain:
      default: localhost
    port:
      default: "8080"
security:
- basicAuth: []
paths:
  /reservation/{shopId}:
    post:
      tags:
      - Reservation
      description: Create a stock reservation.<p>
      
        This service creates stock reservations for a given OMS shop instance. A stock reservation is a list of reserved products with the appropriate amount. Each stock reservation has a validity which can be set by the field lifetime at the request payload.<p>

        The response provides a status code 201 on success with the reserved products, the state of the reservation and a unique reservation reference ID.<p>

        This service only supports and accepts requests with content-type application/json.
      operationId: createReservation
      parameters:
      - name: shopId
        in: path
        description: The id of the shop.
        required: true
        schema:
          type: integer
          format: int64
        example: 1000
      requestBody:
        content:
          application/vnd.intershop.reservation.v2+json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseReservation'
        "400":
          description: Bad Request
        "401":
          description: Authentication information is missing or invalid
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: An unexpected error occured
  /reservation/{reservationId}:
    get:
      tags:
      - Reservation
      description: Used to get a stock reservation. Usually called to check the validity of a stock reservation.
      operationId: getReservation
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 115
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseReservation'
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: An unexpected error occured
    put:
      tags:
      - Reservation
      description: Update a stock reservation.<p> 
        This PUT method updates an existing stock reservation. Unlike the POST method to create a new reservation, this method updates specific information of an existing stock reservation. You can update the validity of a reservation. You can remove already reserved products from a reservation or add other products (reservation items). Furthermore, the reserved quantity of an already reserved product can be changed.<p>

        If the reservation is already expired  each product reservations will be removed and the OMS perform the creation of new reservation items like the POST method it does. At the response appears an exception with code 21004 and message " The reservation with id <resvId> has already expired".<p>

        This service only supports and accepts requests with content-type application/json.
      operationId: updateReservation
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 115
      requestBody:
        content:
          application/vnd.intershop.reservation.v2+json:
            schema:
              $ref: '#/components/schemas/ReservationRequest'
        required: true
      responses:
        "201":
          description: Created
            Stock reservation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpResponseReservation'
        "400":
          description: Bad Request
            There is no reservation in the OMS system for parameter resvId or in the case of a semantic or syntactic error.
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: An unexpected error occured
    delete:
      tags:
      - Reservation
      description: Remove a stock reservation.<p>
        Used by shop systems to delete an existing stock reservation from the IOM system. 
      operationId: deleteReservation
      parameters:
      - name: reservationId
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 115
      responses:
        "204":
          description: Stock reservation successfully removed
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "500":
          description: An unexpected error occured
components:
  schemas:
    ReservationItem:
      type: object
      properties:
        id:
          type: string
          description: a reference to an article.
          example: "testProduct100"
        qty:
          type: integer
          format: int64
          description: the number of product items to be reserved for this product
          example: 12345
        state:
            $ref: '#/components/schemas/ReservationState'
      description: A reservation item containing the article reference for the shop and the required quantity of a product.
    ReservationType:
      type: string
      enum:
          - COMPLETE
          - PARTLY
      default: COMPLETE
    ReservationState:
      type: string
      enum:
          - reserved
          - expired
      default: reserved
    CodedException:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
      description: Exceptions.
    FieldError:
      type: object
      properties:
        message:
          type: string
        sourceField:
          type: string
      description: Errors at parameters.
    ReservationRequest:
      type: object
      properties:
          lifetime:
            type: integer
            format: int64
          type:
              $ref: '#/components/schemas/ReservationType'
          items:
            type: array
            description: The list of reservation-objects.
            items:
              $ref: '#/components/schemas/ReservationItem'
    ReservationResponse:
      type: object
      properties:
          validUntil:
            type: string
          resvId:
            type: integer
            format: int64
            description: Id of the reservation.
            example: 1234567890
          items:
            type: array
            description: The list of reservation-objects.
            items:
              $ref: '#/components/schemas/ReservationItem'
    HttpResponseReservation:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/ReservationResponse'
        statusCode:
          type: integer
          description: The status code of the response.
          format: int32
        errors:
          type: array
          description: Errors at parameters.
          items:
            $ref: '#/components/schemas/FieldError'
        exceptions:
          type: array
          description: Exceptions.
          items:
            $ref: '#/components/schemas/CodedException'
  securitySchemes:
    basicAuth:
      type: http
      description: Basic Authentication
      scheme: basic
