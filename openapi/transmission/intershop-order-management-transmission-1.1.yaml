openapi: 3.0.0
info:
  title: IOM TRANSMISSION REST API
  description: The transmission REST API supports tasks to view and manage transmissions
    of the IOM.<br>
  contact:
    name: Intershop Communications AG
    url: http://intershop.com
  version: "1.1"
servers:
- url: '{protocol}://{domain}:{port}/rest'
  description: The production API server.
  variables:
    protocol:
      default: https
      enum:
      - http
      - https
    domain:
      default: localhost
    port:
      default: "8080"
tags:
- name: transmission
  description: Transmission related operations exposed by this service.
paths:
  /transmissions:
    get:
      tags:
      - transmission
      summary: Get transmissions by search criterias.
      description: Returns all transmissions for selected search criterias.
      operationId: getTransmissions
      parameters:
      - name: creationDate[gte]
        in: query
        description: The earliest creation date of a transmission.
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: creationDate[lte]
        in: query
        description: The latest creation date of a transmission.
        required: true
        style: form
        explode: true
        schema:
          type: string
          format: date-time
      - name: transmissionTypes
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/TransmissionType'
      - name: transmissionSubtypes
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/TransmissionSubtype'
      - name: transmissionStatuses
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/TransmissionStatus'
      - name: transmissionResponseStatuses
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/TransmissionResponseStatus'
      - name: receiverTypes
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/ReceiverType'
      - name: shopIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            description: The id(s) of the shop(s).
            format: int64
        example: 1
      - name: supplierIds
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: integer
            description: The id(s) of the supplier(s).
            format: int64
        example: 1
      - name: limit
        in: query
        description: The number of items to return.<br> If not set the limit is 1000.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 50
          default: 1000
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result
          set.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          example: 0
          default: 0
      - name: orderBy
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/SortableTransmissionAttribute'
      - name: sortDirection
        in: query
        required: false
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/SortDirection'
      responses:
        200:
          description: The response for a transmission collection request.
          content:
            application/vnd.intershop.transmission.v1+json:
              schema:
                $ref: '#/components/schemas/TransmissionCollectionContainer'
        400:
          description: Bad request - Generic or business logic validation error.
          content:
            application/vnd.intershop.transmission.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        401:
          description: Unauthorized - Authentication information is missing or invalid.
          headers:
            WWW-Authenticate:
              style: simple
              explode: false
              schema:
                type: string
        403:
          description: Forbidden - the user is not authorized to use this resource.
        406:
          description: Not Acceptable - A representation of the response in the media
            type that was requested in the ACCEPT header cannot be provided.
        500:
          description: Internal Server Error - An unexpected error occured.
      security:
      - basicAuth: []
      - bearerAuth: []
  /transmissions/{transmissionId}:
    get:
      tags:
      - transmission
      summary: Get a transmission by id.
      description: Returns a transmission for the given id.
      operationId: getTransmission
      parameters:
      - name: transmissionId
        in: path
        description: The transmission identifier.
        required: true
        style: simple
        explode: false
        schema:
          type: string
        example: ORDERTRANSMISSION-10000
      responses:
        200:
          description: The response for one transmission request.
          content:
            application/vnd.intershop.transmission.v1+json:
              schema:
                $ref: '#/components/schemas/Transmission'
        400:
          description: Bad request - Generic or business logic validation error.
          content:
            application/vnd.intershop.transmission.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        401:
          description: Unauthorized - Authentication information is missing or invalid.
          headers:
            WWW-Authenticate:
              style: simple
              explode: false
              schema:
                type: string
        403:
          description: Forbidden - the user is not authorized to use this resource.
        406:
          description: Not Acceptable - A representation of the response in the media
            type that was requested in the ACCEPT header cannot be provided.
        500:
          description: Internal Server Error - An unexpected error occured.
      security:
      - basicAuth: []
      - bearerAuth: []
  /transmission-updates:
    post:
      tags:
      - transmissionUpdate
      summary: Bulk create processes to update statuses of transmissions.
      description: Bulk create processes to update statuses of transmissions.<br>
        A process will be created for each transmission, which will be processed asynchronously.
      operationId: updateTransmissions
      requestBody:
        content:
          application/vnd.intershop.transmission.v1+json:
            schema:
              type: array
              description: Ids of transmissions and update types that should be done.
              items:
                $ref: '#/components/schemas/TransmissionUpdate'
      responses:
        207:
          description: Contains multiple responses for different requests, that was
            done within one single request.
          content:
            application/vnd.intershop.transmission.v1+json:
              schema:
                $ref: '#/components/schemas/MultiStatusCollectionContainer'
        400:
          description: Bad request - Generic or business logic validation error.
          content:
            application/vnd.intershop.transmission.v1+json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        401:
          description: Unauthorized - Authentication information is missing or invalid.
          headers:
            WWW-Authenticate:
              style: simple
              explode: false
              schema:
                type: string
        403:
          description: Forbidden - the user is not authorized to use this resource.
        406:
          description: Not Acceptable - A representation of the response in the media
            type that was requested in the ACCEPT header cannot be provided.
        415:
          description: Unsupported Media Type - The media type of the sent body is
            not supported.
      security:
      - basicAuth: []
      - bearerAuth: []
components:
  schemas:
    TransmissionCollectionContainer:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/CollectionMetaData'
        data:
          type: array
          description: The core data of the transmission collection.
          items:
            $ref: '#/components/schemas/Transmission'
    MultiStatusCollectionContainer:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MultiStatusCollectionMetaData'
        data:
          type: array
          description: The core data of the multi-status collection.
          items:
            $ref: '#/components/schemas/MultiStatus'
    Transmission:
      type: object
      properties:
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
        id:
          type: string
          description: The transmission identifier.
          example: ORDERTRANSMISSION-10000
        transmissionType:
          $ref: '#/components/schemas/TransmissionType'
        transmissionSubtype:
          type: string
          description: |
            The subtype of the transmission.<br> Please note the string representation to support subtypes from schema `TransmissionType` and unknown subtypes, e.g. custom ones.
          example: MAIL_ORDER
        status:
          $ref: '#/components/schemas/TransmissionStatus'
        responseStatus:
          $ref: '#/components/schemas/TransmissionResponseStatus'
        creationDate:
          type: string
          description: The date when the transmission was created.
          format: date-time
        modificationDate:
          type: string
          description: The date when the transmission was modified.
          format: date-time
        orderId:
          type: integer
          description: The id of the order.
          format: int64
          example: 10026
        shopOrderNumber:
          type: string
          description: The order number as used by the shop.
          example: 20180303_123
        shopId:
          type: integer
          description: The id of the shop.
          format: int64
          example: 1000
        shopName:
          type: string
          description: The name of the shop.
          example: Test Shop US DE
        supplierId:
          type: integer
          description: The id of the supplier.
          format: int64
          example: 1000
        supplierName:
          type: string
          description: The name of the supplier.
          example: Test Supplier US DE
        receiverType:
          $ref: '#/components/schemas/ReceiverType'
        retryCount:
          type: integer
          description: Number of sending attempts.
          example: 2
        retryDate:
          type: string
          description: The date of the last attempt to send the transmission.
          format: date-time
        nextRetryDate:
          type: string
          description: The next date to send the transmission.
          format: date-time
        errorText:
          type: string
          description: The error text, if the transmission failed.
          example: This was no error, because the status was set OK.
    TransmissionUpdate:
      type: object
      properties:
        id:
          type: string
          description: The transmission identifier.
          example: ORDERTRANSMISSION-10000
        updateType:
          $ref: '#/components/schemas/TransmissionUpdateType'
      description: A transmission id and the process that should be done on this transmission.
    TransmissionType:
      type: string
      description: |
        The type of the transmission.<br> <br> `ORDERTRANSMISSION` - Transmissions that are used for order processing messages, e.g. to announce an order entry. Subtypes of this type start with `ORDER_`.<br>  `DISPATCHTRANSMISSION` - Transmissions that are used for dispatch messages, e.g. a delivery that was made. Subtypes of this type start with `DISPATCH_`.<br> `RETURNTRANSMISSION` - Transmissions that are used for return messages, e.g. a received return. Subtypes of this type start with `RETURN_`.<br> `PAYMENTTRANSMISSION` - Transmissions that are used for payment notification messages, e.g. a received payment. Subtypes of this type start with `PAYMENT_`.<br> `MAILTRANSMISSION` - Transmissions that are used for emails, e.g. to send a delivery email to the customer. Subtypes of this type start with `MAIL_`.<br> `RESPONSETRANSMISSION` - Transmissions that are used for response messages, e.g. to respond to a delivery request. Subtypes of this type start with `RESPONSE_`.<br> `INVOICETRANSMISSION` - Transmissions that are used for invoice processing messages. Subtypes of this type start with `INVOICE_`.<br> `DOCUMENTTRANSMISSION` - Transmissions that are used for document processing messages. Subtypes of this type start with `DOCUMENT_`.<br>    `RETURNANNOUNCEMENTTRANSMISSION` - Transmissions that are used for return announcements messages. Subtypes of this type start with `RETURNANNOUNCEMENT_`.<br> <br> For any type use `OTHERS` for subtypes that are not listed, e.g. custom ones.<br>
      example: ORDERTRANSMISSION
      enum:
      - ORDERTRANSMISSION
      - DISPATCHTRANSMISSION
      - RETURNTRANSMISSION
      - PAYMENTTRANSMISSION
      - MAILTRANSMISSION
      - RESPONSETRANSMISSION
      - INVOICETRANSMISSION
      - DOCUMENTTRANSMISSION
      - RETURNANNOUNCEMENTTRANSMISSION
    TransmissionSubtype:
      type: string
      description: |
        The subtype of the transmission, that defines a special transmission of a type, e.g. an email that was sent to confirm an order.<br> <br> Use subtypes that start with `ORDER_` for type `ORDERTRANSMISSION`.<br> Use subtypes that start with `DISPATCH_` for type `DISPATCHTRANSMISSION`.<br> Use subtypes that start with `RETURN_` for type `RETURNTRANSMISSION`.<br> Use subtypes that start with `PAYMENT_` for type `PAYMENTTRANSMISSION`.<br> Use subtypes that start with `MAIL_` for type `MAILTRANSMISSION`.<br> Use subtypes that start with `RESPONSE_` for type `RESPONSETRANSMISSION`.<br> Use subtypes that start with `INVOICE_` for type `INVOICETRANSMISSION`.<br> Use subtypes that start with `DOCUMENT_` for type `DOCUMENTTRANSMISSION`.<br> Use subtypes that start with `RETURNANNOUNCEMENT_` for type `RETURNANNOUNCEMENTTRANSMISSION`.<br> Use the subtype `OTHERS` for any type for unlisted subtypes, e.g. custom ones.<br> <br> `ORDER_CHECKED` - Send a message that an order was validated.<br> `ORDER_ANNOUNCEMENT` - Send an order.<br> `ORDER_BACKLOG` - Send a message that the scheduled delivery date has been exceeded. At least one product has not yet been delivered.<br> `ORDER_RECALL` - Send a recall request for an order.<br> `ORDER_CONFIRMATION` - Send the confirmation for an order.<br> `ORDER_RECALL_REQUEST` - Resend the recall request for an order.<br> `ORDER_BACKLOG_REQUEST` - Send a reminding message that the scheduled delivery date has been exceeded. At least one product has not yet been delivered.<br> `ORDER_APPROVAL` - Send the approval of an order.<br> `ORDER_RESEND` - Resend an order.<br> `DISPATCH_SEND` - Send a dispatch message.<br> `DISPATCH_REQUEST_NEW` - Send the request for a new dispatch.<br> `RETURN_SEND` - Send a return message.<br> `RETURN_CONFIRMATION` - Send the confirmation of a return.<br>  `RETURN_REJECT` - Send the rejection of a return.<br> `RETURN_REQUEST_NEW` - Send a request for a new return.<br> `PAYMENT_SEND` - Send a payment notification.<br> `MAIL_ORDER` - Send an email to confirm an order.<br> `MAIL_ORDER_MERGE` - Send an email that orders was merged to one fulfillment.<br> `MAIL_READY_FOR_PICKUP` - Send an email that a delivery is ready to pickup.<br> `MAIL_ORDER_COMMISSIONED` - Send an email that an order was successfully commissioned.<br> `MAIL_TEMPORARY_RESPONSE` - Send an email that an order will be routed to the assigned fulfillment locations.<br> `MAIL_INITIAL_RESPONSE` - Send an email that a response was created.<br> `MAIL_COUNTINUOUS_RESPONSE` - Send an email that a response from the supplier was received.<br> `MAIL_DISPATCH` - Send an email that a dispatch was made.<br> `MAIL_DISPATCH_IMMATERIAL` - Send an email with links to download digital goods.<br> `MAIL_RETURN_CAN` - Send an email to note or confirm a return because of a cancellation.<br> `MAIL_RETURN_RCL` - Send an email that the order was canceled.<br> `MAIL_RETURN_INV` - Send an email to note an inversion, e.g. the package could not be delivered because of a wrong shipping address.<br> `MAIL_RETURN_RET` - Send an email for a general return.<br> `MAIL_RETURN_DEF` - Send an email to confirm a return because of defects of a product.<br> `MAIL_PAYMENT_REMINDER` - Send an email that a payment has not yet been made.<br> `MAIL_DELIVERY_DELAY` - Send an email to note that the expected delivery date will be delayed.<br> `MAIL_INVOICE` - Send an email with an attached invoice document.<br> `MAIL_CEDIT_NOTE` - Send an email with an attached credit note document.<br> `MAIL_RETURN_RCL010` - Send an email that the order was canceled. The customer has requested the cancellation.<br> `MAIL_RETURN_RCL020` - Send an email that the order was canceled. The product is end-of-life and not available any longer.<br> `MAIL_RETURN_RCL021` - Send an email that the order was canceled. The product is currently not available.<br> `MAIL_RETURN_RCL045` - Send an email that the order was canceled. The payment was not received yet.<br> `MAIL_RETURN_RCL980` - Send an email that the order was canceled. There is a suspicion of fraud.<br> `MAIL_RETURN_REJECTED` - Send an email that a return was rejected.<br> `MAIL_DISPATCH_INVOICE` - Send an email that a dispatch was made. An invoice document is attached to the email.<br> `MAIL_RETURN_CREDIT_NOTE` - Send an email to note or confirm a return or cancellation. A credit note document is attached to the email.<br> `MAIL_RETURN_CAN_CREDIT_NOTE` - Send an email to note or confirm a return because of a cancellation. A credit note document is attached to the email.<br> `MAIL_RETURN_RCL_CREDIT_NOTE` - Send an email that the order was canceled. A credit note document is attached to the email.<br> `MAIL_RETURN_INV_CREDIT_NOTE` - Send an email to note an inversion, e.g. the package could not be delivered because of a wrong shipping address. A credit note document is attached to the email.<br> `MAIL_RETURN_RET_CREDIT_NOTE` - Send an email for a general return. A credit note document is attached to the email.<br> `MAIL_RETURN_DEF_CREDIT_NOTE` - Send an email to confirm a return because of defects of a product. A credit note document is attached to the email.<br> `MAIL_RETURN_RCL010_CREDIT_NOTE` - Send an email that the order was canceled. The customer has requested the return or cancellation. A credit note document is attached to the email.<br> `MAIL_RETURN_RCL020_CREDIT_NOTE` - Send an email that the order was canceled. The product is end-of-life and not available any longer. A credit note document is attached to the email.<br> `MAIL_RETURN_RCL045_CREDIT_NOTE` - Send an email that the order was canceled. The payment was not received yet. A credit note document is attached to the email.<br> `MAIL_RETURN_REFUNDED` - Send an email that a refund was made.<br> `MAIL_RETURN_RCL980_CREDIT_NOTE` - Send an email that the order was canceled. There is a suspicion of fraud. A credit note document is attached to the email.<br> `MAIL_RETURN_RCL021_CREDIT_NOTE` - Send an email that the order was canceled. The product is currently not available. A credit note document is attached to the email.<br> `MAIL_RETURN_LABEL` - Send an email with an attached return label.<br> `MAIL_RETURN_ANNOUNCEMENT` - Send an email that a return request was created.<br> `MAIL_RETURN_ANNOUNCEMENT_TRANSMISSION` - Send an email that a transmission for a return request was created.<br> `RESPONSE_SEND` - Send a response message.<br> `RESPONSE_CONFIRMATION` - Send the confirmation of a response.<br> `RESPONSE_REQUEST_NEW` - Send the request for a new response.<br> `RESPONSE_TEMPORARY` - Send a temporary response.<br> `RESPONSE_INITIAL` - Send an initial response.<br> `RESPONSE_CONTINUOUS` - Send a following response.<br> `INVOICE_CREATE_DOCUMENT` - Create an invoice document.<br> `INVOICE_DEBITOR_SEND`- Send debitor related information.<br> `INVOICE_OPEN_ITEM_SEND` - Send invoice related information.<br> `DOCUMENT_SUPPLIER_DELIVERY_NOTE_SEND` - Send a delivery note to a supplier.<br> `DOCUMENT_SUPPLIER_RETURN_SLIP_SEND` - Send a return slip to a supplier.<br> `DOCUMENT_SUPPLIER_ORDER_RETURN_LABEL_SEND` - Send a return label to a supplier.<br> `DOCUMENT_SHOP_DELIVERY_NOTE_SEND` - Send a delivery note to a shop.<br> `DOCUMENT_SHOP_RETURN_SLIP_SEND` - Send a return slip to a shop.<br> `DOCUMENT_SHOP_ORDER_RETURN_LABEL_SEND` - Send a return label to a shop.<br> `DOCUMENT_SHOP_INVOICE_CREDIT_NOTE` - Send an invoice and/or credit note to a shop.<br> `RETURN_ANNOUNCEMENT_SEND` - Send a return announcement.<br> `OTHERS` - All subtypes that are not listed, e.g. custom ones.<br>
      example: MAIL_ORDER
      enum:
      - ORDER_CHECKED
      - ORDER_ANNOUNCEMENT
      - ORDER_BACKLOG
      - ORDER_RECALL
      - ORDER_CONFIRMATION
      - ORDER_RECALL_REQUEST
      - ORDER_BACKLOG_REQUEST
      - ORDER_APPROVAL
      - ORDER_RESEND
      - DISPATCH_SEND
      - DISPATCH_REQUEST_NEW
      - RETURN_SEND
      - RETURN_CONFIRMATION
      - RETURN_REJECT
      - RETURN_REQUEST_NEW
      - PAYMENT_SEND
      - MAIL_ORDER
      - MAIL_ORDER_MERGE
      - MAIL_READY_FOR_PICKUP
      - MAIL_ORDER_COMMISSIONED
      - MAIL_TEMPORARY_RESPONSE
      - MAIL_INITIAL_RESPONSE
      - MAIL_COUNTINUOUS_RESPONSE
      - MAIL_DISPATCH
      - MAIL_DISPATCH_IMMATERIAL
      - MAIL_RETURN_CAN
      - MAIL_RETURN_RCL
      - MAIL_RETURN_INV
      - MAIL_RETURN_RET
      - MAIL_RETURN_DEF
      - MAIL_PAYMENT_REMINDER
      - MAIL_DELIVERY_DELAY
      - MAIL_INVOICE
      - MAIL_CEDIT_NOTE
      - MAIL_RETURN_RCL010
      - MAIL_RETURN_RCL020
      - MAIL_RETURN_RCL021
      - MAIL_RETURN_RCL045
      - MAIL_RETURN_RCL980
      - MAIL_RETURN_REJECTED
      - MAIL_DISPATCH_INVOICE
      - MAIL_RETURN_CREDIT_NOTE
      - MAIL_RETURN_CAN_CREDIT_NOTE
      - MAIL_RETURN_RCL_CREDIT_NOTE
      - MAIL_RETURN_INV_CREDIT_NOTE
      - MAIL_RETURN_RET_CREDIT_NOTE
      - MAIL_RETURN_DEF_CREDIT_NOTE
      - MAIL_RETURN_RCL010_CREDIT_NOTE
      - MAIL_RETURN_RCL020_CREDIT_NOTE
      - MAIL_RETURN_RCL045_CREDIT_NOTE
      - MAIL_RETURN_REFUNDED
      - MAIL_RETURN_RCL980_CREDIT_NOTE
      - MAIL_RETURN_RCL021_CREDIT_NOTE
      - MAIL_RETURN_LABEL
      - MAIL_RETURN_ANNOUNCEMENT
      - MAIL_RETURN_ANNOUNCEMENT_TRANSMISSION
      - RESPONSE_SEND
      - RESPONSE_CONFIRMATION
      - RESPONSE_REQUEST_NEW
      - RESPONSE_TEMPORARY
      - RESPONSE_INITIAL
      - RESPONSE_CONTINUOUS
      - INVOICE_CREATE_DOCUMENT
      - INVOICE_DEBITOR_SEND
      - INVOICE_OPEN_ITEM_SEND
      - DOCUMENT_SUPPLIER_DELIVERY_NOTE_SEND
      - DOCUMENT_SUPPLIER_RETURN_SLIP_SEND
      - DOCUMENT_SUPPLIER_ORDER_RETURN_LABEL_SEND
      - DOCUMENT_SHOP_DELIVERY_NOTE_SEND
      - DOCUMENT_SHOP_RETURN_SLIP_SEND
      - DOCUMENT_SHOP_ORDER_RETURN_LABEL_SEND
      - DOCUMENT_SHOP_INVOICE_CREDIT_NOTE
      - RETURN_ANNOUNCEMENT_SEND
      - OTHERS
    TransmissionStatus:
      type: string
      description: |
        The processing status of the transmission.<br> <br> `INITIAL` - Transmission is initially stored.<br> `DO_PULL` - Transmission will be pulled.<br> `PULLED` - Transmission was received (pulled) from the sender.<br> `DO_PUSH` - Transmission can be sent (pushed) to the receiver.<br> `PUSHED` - Transmission was sent (pushed) to the receiver.<br> `DO_MANUAL_CHECK` - The processing of transmission was canceled because of errors. The transmission has to be checked manually.<br> `CHECKED` - Transmission was checked manually and is ready to process.<br> `DO_CANCEL` - Transmission will be canceled.<br> `CANCELED` - Transmission can be canceled because processing is not required any longer.<br> `TRANSMISSIONED` - Transmission was submitted.<br> `CONFIRMED` - Transmission was confirmed from the receiver.
      example: CONFIRMED
      enum:
      - INITIAL
      - DO_PULL
      - PULLED
      - DO_PUSH
      - PUSHED
      - DO_MANUAL_CHECK
      - CHECKED
      - DO_CANCEL
      - CANCELED
      - TRANSMISSIONED
      - CONFIRMED
    TransmissionUpdateType:
      type: string
      description: |
        The type of process to create on a transmission, e.g. to resend a transmission.<br> <br> `RESEND` - Resend the transmission.<br> `CANCEL` - Cancel the transmission.<br> `SENT` - Set the transmission as already sent.<br>
      example: RESEND
      enum:
      - RESEND
      - CANCEL
      - SENT
    TransmissionResponseStatus:
      type: string
      description: |
        The status of the response of the transmission.<br> <br> `OK` - The transmission was successfully received.<br> `INVALID` - An error occurred during validation check at the receiver.<br> `REJECTED` - The operation was rejected by the receiver.<br> `EXTERNAL_ERROR` - An unexpected error occurred at the receiver.<br> `INTERNAL_ERROR` - Internal unexpected error has occurred.<br> `NOT_AVAILABLE` - The response status is not set.
      example: REJECTED
      enum:
      - OK
      - INVALID
      - REJECTED
      - EXTERNAL_ERROR
      - INTERNAL_ERROR
      - NOT_AVAILABLE
    ReceiverType:
      type: string
      description: |
        The type of the receiver of a transmission.<br> <br> `OMS` - The OMS-application itself.<br> `SHOP` - The shop is the receiver of the transmission.<br> `SUPPLIER` - The supplier is the receiver of the transmission, e.g. of a delivery request.<br> `CUSTOMER` - The customer is the receiver of the transmission, e.g. an email to confirm an order.<br> `PAYMENTPROVIDER` - A payment provider is the receiver of the transmission, e.g. to note a received payment to.<br> `FINANCECONTROLLER` - A finance contoller is the receiver of the transmission, e.g. a debitor management system that receives open amounts.
      example: SHOP
      enum:
      - OMS
      - SHOP
      - SUPPLIER
      - CUSTOMER
      - PAYMENTPROVIDER
      - FINANCECONTROLLER
    SortableTransmissionAttribute:
      type: string
      description: |
        The attribute on which should be sorted.<br> <br> `id` - Sort by the identifier in scope of it's type.<br> `transmissionSubtype` - Sort by the subtype of the transmission.<br> `status` - Sort by the processing status.<br> `responseStatus` - Sort by the response status.<br> `creationDate` - Sort by the creation date.<br> `modificationDate` - Sort by the modification date.<br> `orderId` - Sort by the id of the order.<br>  `shopOrderNumber` - Sort by the shop order number.<br> `shopId` - Sort by the id of the shop.<br> `shopName` - Sort by the name of the shop.<br> `supplierId` - Sort by the id of the supplier.<br> `supplierName` - Sort by the name of the supplier.<br> `receiver` - Sort by the receiver of the transmission.<br> `retryCount` - Sort by the number of sending attempts.<br> `retryDate` - Sort by the date of the last attempt to send.<br> `nextRetryDate` - Sort by the next date to send.<br> `errorText` - Sort by the possible error message of the transmission.
      example: creationDate
      default: id
      enum:
      - id
      - transmissionType
      - transmissionSubtype
      - status
      - responseStatus
      - creationDate
      - modificationDate
      - shopOrderNumber
      - orderId
      - shopId
      - shopName
      - supplierId
      - supplierName
      - receiverType
      - retryCount
      - retryDate
      - nextRetryDate
      - errorText
    SortDirection:
      type: string
      description: |
        The sort direction the attribute should be sorted with.<br><br> `ASC` - Sort by the attribute ascending.<br> `DESC` - Sort by the attribute descending.
      example: ASC
      default: ASC
      enum:
      - ASC
      - DESC
    Status:
      type: integer
      description: The HTTP status code.
      format: int32
      example: 400
    MultiStatus:
      required:
      - link
      - status
      type: object
      properties:
        link:
          $ref: '#/components/schemas/Link'
        status:
          $ref: '#/components/schemas/Status'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      description: Contains multiple responses `MultiStatusResponse` for different
        requests, that was done within one single request.
    Link:
      type: object
      properties:
        href:
          type: string
          description: The link to the resource.
        rel:
          type: string
          description: The relation of the link to the resource, i.e. self.
    Error:
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Exception / Error code
          example: VALIDATION_EXCEPTION
        message:
          type: string
          description: Exception / Error message
          example: Attribute XYZ is mandatory
        value:
          type: object
          description: Value which caused the exception / error.
    ErrorReport:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error'
      description: Detailed information about what went wrong.
    CollectionMetaData:
      type: object
      properties:
        totalCount:
          type: integer
          description: The total number of objects in the collection (without offset
            and limit).
          format: int64
          example: 10000
      description: The meta data of the collection.
    MultiStatusCollectionMetaData:
      type: object
      properties:
        successCount:
          type: integer
          description: The number of successful operations.
          format: int64
          example: 100
        failureCount:
          type: integer
          description: The number of failed operations.
          format: int64
          example: 5
      description: The meta data of a multi-status collection.
  responses:
    TransmissionCollectionContainerResponse:
      description: The response for a transmission collection request.
      content:
        application/vnd.intershop.transmission.v1+json:
          schema:
            $ref: '#/components/schemas/TransmissionCollectionContainer'
    Created:
      description: Created - The entity was created successfully.
    Accepted:
      description: Accepted - The request was successful and will be processed asynchronously.
    MultiStatus:
      description: Multi Status - The request contains several response statuses.
    BadRequest:
      description: Bad request - Generic or business logic validation error.
      content:
        application/vnd.intershop.transmission.v1+json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    Unauthorized:
      description: Unauthorized - Authentication information is missing or invalid.
      headers:
        WWW-Authenticate:
          style: simple
          explode: false
          schema:
            type: string
    Forbidden:
      description: Forbidden - the user is not authorized to use this resource.
    NotFound:
      description: Not found - the resource is not found.
    NotAcceptable:
      description: Not Acceptable - A representation of the response in the media
        type that was requested in the ACCEPT header cannot be provided.
    UnsupportedMediaType:
      description: Unsupported Media Type - The media type of the sent body is not
        supported.
    InternalServerError:
      description: Internal Server Error - An unexpected error occured.
  parameters:
    LimitParam:
      name: limit
      in: query
      description: The number of items to return.<br> If not set the limit is 1000.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 50
        default: 1000
    OffsetParam:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result
        set.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        example: 0
        default: 0
    SortDirectionParam:
      name: sortDirection
      in: query
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/SortDirection'
  securitySchemes:
    bearerAuth:
      type: http
      description: JWT Bearer token
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      description: Basic Authentication
      scheme: basic
